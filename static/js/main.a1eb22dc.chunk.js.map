{"version":3,"sources":["Components/menu-item/menu-item-component.jsx","Components/directory/directory.jsx","Pages/homepage/homepage.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["withRouter","title","imageUrl","size","history","linkUrl","match","className","onClick","push","url","style","backgroundImage","toUpperCase","Directory","state","section","id","this","map","otherprops","Component","Homepage","Example","App","exact","path","component","Boolean","window","location","hostname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAuBeA,eAnBW,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MACjE,OACI,sBACAC,UAAS,UAAKJ,EAAL,cACTK,QAAS,kBAAIJ,EAAQK,KAAR,UAAgBH,EAAMI,KAAtB,OAA4BL,KAFzC,UAIA,qBACAE,UAAU,mBACVI,MAAO,CAACC,gBAAgB,OAAD,OAAQV,EAAR,QAEvB,sBAAKK,UAAU,UAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBN,EAAMY,gBAC7B,sBAAMN,UAAU,WAAhB,+BCZNO,E,kDACF,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAQ,CACJ,CACIf,MAAO,OACPC,SAAU,oCACVe,GAAI,EACJZ,QAAS,aAEX,CACEJ,MAAO,UACPC,SAAU,uCACVe,GAAI,EACJZ,QAAS,gBAEX,CACEJ,MAAO,WACPC,SAAU,wCACVe,GAAI,EACJZ,QAAS,iBAEX,CACEJ,MAAO,SACPC,SAAU,sCACVC,KAAM,QACNc,GAAI,EACJZ,QAAS,eAEX,CACEJ,MAAO,OACPC,SAAU,mCACVC,KAAM,QACNc,GAAI,EACJZ,QAAS,eAlCZ,E,0CAuCb,WACI,OACI,qBAAKE,UAAU,iBAAf,SACKW,KAAKH,MAAMC,QAAQG,KAAI,gBAAEF,EAAF,EAAEA,GAAOG,EAAT,6BACpB,cAAC,EAAD,eAAgCA,GAARH,Y,GA5CpBI,aAmDTrB,cAAWc,GClDbQ,EAAW,WACpB,OACI,qBAAKf,UAAU,WAAf,SACI,cAAC,EAAD,OCDNgB,EAAU,WAChB,OACE,8BACE,2CAgBWC,MAXf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,eAAC,IAAD,WACA,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,OAAOC,UAAWJ,UCRtBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MAAM,2DCjBnC,IAYe0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCEdQ,IAASC,OACP,cAAC,IAAD,UACA,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGFC,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE3G5BtB,M","file":"static/js/main.a1eb22dc.chunk.js","sourcesContent":["import React from 'react'\nimport './menu-itemstyle.scss'\nimport {withRouter} from 'react-router-dom'\n\nconst Menuitemcomponent = ({title, imageUrl, size, history, linkUrl, match}) => {\n    return (\n        <div \n        className={`${size} menu-item`}\n        onClick={()=>history.push(`${match.url}${linkUrl}`)}\n        >\n        <div\n        className='background-image'\n        style={{backgroundImage:`url(${imageUrl})`}} \n        />\n        <div className=\"content\">\n            <h1 className=\"title\">{title.toUpperCase()}</h1>\n            <span className=\"subtitle\">Show Now</span>\n        </div>\n    \n        </div>\n    )\n}\n\nexport default withRouter(Menuitemcomponent)","import React, { Component } from 'react'\nimport Menuitemcomponent from '../menu-item/menu-item-component'\nimport {withRouter} from 'react-router-dom'\n\nclass Directory extends Component {\n    constructor(){\n        super()\n        this.state = {\n            section:[\n                {\n                    title: 'hats',\n                    imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\n                    id: 1,\n                    linkUrl: 'shop/hats'\n                  },\n                  {\n                    title: 'jackets',\n                    imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\n                    id: 2,\n                    linkUrl: 'shop/jackets'\n                  },\n                  {\n                    title: 'sneakers',\n                    imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\n                    id: 3,\n                    linkUrl: 'shop/sneakers'\n                  },\n                  {\n                    title: 'womens',\n                    imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\n                    size: 'large',\n                    id: 4,\n                    linkUrl: 'shop/womens'\n                  },\n                  {\n                    title: 'mens',\n                    imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\n                    size: 'large',\n                    id: 5,\n                    linkUrl: 'shop/mens'\n                  }\n            ]\n        }\n    }\n    render() {\n        return (\n            <div className='directory-menu'>\n                {this.state.section.map(({id, ...otherprops})=>(\n                    <Menuitemcomponent key={id} {...otherprops}/>\n                ))}\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Directory)","import React from 'react'\nimport './homepage.scss'\n\nimport Directory from '../../Components/directory/directory'\n\nexport const Homepage = () => {\n    return (\n        <div className=\"homepage\">\n            <Directory/>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\n\nimport {Route,Switch} from 'react-router-dom'\n\nimport {Homepage} from './Pages/homepage/homepage'\n\nconst Example = () =>{\nreturn(\n  <div>\n    <h1> route</h1>\n  </div>\n)\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n      <Route exact path='/' component={Homepage}></Route>\n      <Route exact path='/lol' component={Example}></Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom'\n\n\nReactDOM.render(\n  <HashRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}